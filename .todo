# TODO

## ROADMAP

### I/
- [x] 1. Language features
- 2. Types
- 3. Optimization
### II/
- 4. Add backend for x86_64 intel
    - emitter/code_intel.cpp
        - https://imada.sdu.dk/u/kslarsen/dm546/Material/IntelnATT.htm
    - fasm
        https://flatassembler.net/
- 5. Add syscalls + small std lib to support test cases
    - impl syscalls in asm
    - link asm syscalls
        - writing C software without the standard library:
            https://gist.github.com/tcoppex/443d1dd45f873d96260195d6431b0989
            - ex asm syscall
            - ex strlen, puts
    - malloc in c:
        - https://github.com/RAGUL1902/Dynamic-Memory-Allocation-in-C
### III/
- 6. Add frontend for my-lang
    - parser/lexer.cpp
    - parser/parser.cpp
    - test/tests/
- 7. Implement preprocessor
    - see cython prebuild
- 8. Implement more standard library

## NOTES

- check mem leaks
https://stackoverflow.com/questions/64390291/c-getline-memory-leak-different-behaviours

When Types OK (after c18):
- refactor type check unary, type check binary
- add / clean error msgs in driver
- clean error msgs in parser + semantic analysis / add line
