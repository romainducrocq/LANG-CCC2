# TODO

## ROADMAP

### I/
- [x] 1. Language features
- [x] 2. Types
- 3. Optimization
### II/
- 4. Add backend for x86_64 intel
    - emitter/code_intel.cpp
        - https://imada.sdu.dk/u/kslarsen/dm546/Material/IntelnATT.htm
    - fasm
        https://flatassembler.net/
- 5. Add syscalls + small std lib to support test cases
    - impl syscalls in asm
    - link asm syscalls
        - writing C software without the standard library:
            https://gist.github.com/tcoppex/443d1dd45f873d96260195d6431b0989
            - ex asm syscall
            - ex strlen, puts
    - malloc in c:
        - https://github.com/RAGUL1902/Dynamic-Memory-Allocation-in-C
### III/
- 6. Add frontend for my-lang
    - parser/lexer.cpp
    - parser/parser.cpp
    - test/tests/
- 8. Implement more standard library

## BACKLOG

---- Notes

---- Bug fixes

---- Features

---- Performance

---- Part 3 Optimization

- use bitmask for cmd line params

---- Readme

- add limits of compiler in readme:
    - no memory overflow check, max memory allocation is (2^63)-1 bits (function stack, aggregate type)
    - same for memory addresses / pointer values
        -> overflow = undefined behavior

## PERFORMANCE

## TAGS

part_2 280cef141cc30bb3e3bd3ed4142b950d02141ea5
18_structures aac965f082dabaf22079717647c27555c424a413
17_supporting_dynamic_memory_allocation eba317a9d16173941eb0bc67fb349d6d517b46ae
16_characters_and_strings c75058e984cb480d4059fe0f3c2e43d1af22722c
15_arrays_and_pointer_arithmetic f08b7ca93f6b8228ab5503b0e4dfefc7cf8bb191
14_pointers 5289c9e912ebb95836241e4367687f8eae8071e8
13_floating-point_numbers 9a96ec3694fe81d43cd07eee3147657c400fca5a

## Grammar ideas

https://www.reddit.com/r/C_Programming/comments/xt6n5t/what_is_something_you_would_have_changed_about/
https://gcc.gnu.org/onlinedocs/cpp/C_002b_002b-Named-Operators.html

pub fn add:: x: uint32, y: uint32 -> uint32 = {
    if x eq 0: (
        # do domething
    )
    else if x gt 2: ( 
        # do domething
    )
    else: (
        # do domething
    )
}

or ? 

pub fn add:: x: uint32, y: uint32 -> uint32 = {
    if x eq 0:
        # do domething
        end
    else if x gt 2: 
        # do domething
        end
    else:
        # do domething
        end
    :
    #:
        empty comment
    end#
    end
}

for let x: uint32 <- 0; x lt 50; x += 1: (
    let res: uint32 <- fn(2, 3);
    
)

function is 
extern -> extern fn
no specifier -> pub fn
static -> fn

variable is
extern -> extern var
no specifier -> let
static -> var (or static var)

ternary -> ... then ... else ...

do {} while(); ->
dowhile ...:
    ...
    end

void -> ()

pub fn main:: ()-> (): (
)

@ instead of &
^ instead of *

&& and
|| or
== eq
!= ne
<= ge
>= le
! not
< lt
> gt

{
}
   only for declaration
   scope is :
            end

