# TODO

## ROADMAP

### I/
- [x] 1. Language features
- [x] 2. Types
- 3. Optimization
### II/
- 4. Add backend for x86_64 intel
    - emitter/code_intel.cpp
        - https://imada.sdu.dk/u/kslarsen/dm546/Material/IntelnATT.htm
    - fasm
        https://flatassembler.net/
- 5. Add syscalls + small std lib to support test cases
    - impl syscalls in asm
    - link asm syscalls
        - writing C software without the standard library:
            https://gist.github.com/tcoppex/443d1dd45f873d96260195d6431b0989
            - ex asm syscall
            - ex strlen, puts
    - malloc in c:
        - https://github.com/RAGUL1902/Dynamic-Memory-Allocation-in-C
### III/
- 6. Add frontend for my-lang
    - parser/lexer.cpp
    - parser/parser.cpp
    - test/tests/
- 7. Implement preprocessor
    - see cython prebuild
- 8. Implement more standard library

## BACKLOG

---- Notes

- review 18_structures/ asm_gen.cpp

---- Bug fixes

- see why segfault in 2 invalid tests in 15

---- Features

- add / clean error msgs in driver
- clean error msgs in parser + semantic analysis / add line

---- Performance

- replace for loops with const auto& range where possible
- remove unnessecery copy + move on primitives
- add const correctness
    - https://softwareengineering.stackexchange.com/questions/356477/benefits-or-otherwise-of-using-const-during-variable-assignment
- see if need to reserve vectors with estimate of previous vectior size ?
- see if need to reserve strings with chunk size (4096) ?
- profile with callgrind + kcachegrind

- replace fopen with open
    - https://stackoverflow.com/questions/1658476/c-fopen-vs-open
    - https://stackoverflow.com/questions/49011302/how-to-convert-from-fopen-to-open-function

---- Part 3 Optimization

- use bitmask for cmd line params

---- Readme

- add limits of compiler in readme:
    - no memory overflow check, max memory allocation is (2^63)-1 bits (function stack, aggregate type)
    - same for memory addresses / pointer values
        -> overflow = undefined behavior

## Grammar ideas

https://www.reddit.com/r/C_Programming/comments/xt6n5t/what_is_something_you_would_have_changed_about/

pub fn add:: x: uint32, y: uint32 -> uint32 = {
    if x eq 0: (
        # do domething
    )
    else if x gt 2: ( 
        # do domething
    )
    else: (
        # do domething
    )
}

or ? 

pub fn add:: x: uint32, y: uint32 -> uint32 = {
    if x eq 0:
        # do domething
        end
    else if x gt 2: 
        # do domething
        end
    else:
        # do domething
        end
    :
    #:
        empty comment
    end#
    end
}

for let x: uint32 <- 0; x lt 50; x += 1: (
    let res: uint32 <- fn(2, 3);
    
)

function is 
extern -> extern fn
no specifier -> pub fn
static -> fn

variable is
extern -> extern var
no specifier -> let
static -> var (or static var)

ternary -> ... then ... else ...

do {} while(); ->
dowhile ...:
    ...
    end

void -> ()

pub fn main:: ()-> (): (
)

@ instead of &
^ instead of *

&& and
|| or
== eq
!= ne
<= ge
>= le
! not
< lt
> gt

{
}
   only for declaration
   scope is :
            end

